<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Arbiter" Id="{7464182c-a23a-4d85-9b4a-38e22935bfb9}" SpecialFunc="None">
    <Declaration><![CDATA[(* FB Arbiter
A. Wallace 2020-6-26

The arbiter primary objectives are:
- Provide a simple interface for devices to request beam parameter sets
- Provide a way for devices to verify their BPS is active in the arbiter
- Provide a way for devices remove their requests from evaluation
- Evaluate all active beam parameter requests registered with the aribiter,
to determine the safest combination of all sets, provide this set as an output.
- Do all of this with minimal overhead

To these ends, the arbiter uses a hash-table, the rows being a state-id as the key, and a corresponding
 beam parameter set to be evaluated against all the other sets (or rows), in the table.
 
The hash table can be thought of as an array on steriods, they are worth reading about, suffice to say
the hash table will tell you when you reach the end of all the entries, and enables us to find entries quickly.

These features efficiently address the addition, removal, and verification of beam parameter sets listed in the above requirements.
*)

FUNCTION_BLOCK FB_Arbiter IMPLEMENTS I_HigherAuthority
VAR_INPUT
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: ArbitratedBP
        io: i
        field: DESC Arbitrated BP
     '}
    q_stBeamParams    :    ST_BeamParams; //Updated on each cycle of the arbiter FB with the current arbitrated beam parameter set
    
    q_xStateIDFound    :    BOOL; //Set true if a state-id is found in the assertion pool after calling A_VerifyAssertion
END_VAR
VAR
    {attribute 'pytmc' := '
        pv: AP
        io: i
        field: DESC Assertion Pool
     '}
    fbBPAssertionPool    :    FB_BeamParamAssertionPool; //Table of active beam parameter assertions

    xRequestMade : BOOL; // Arbiter has confirmed its request has made it into the beam parameter request    
    
    {attribute 'pytmc' := '
        pv: ArbiterID
        io: i
        field: DESC Arbiter ID for elev. req.
     '}
    nArbiterID : UDINT; // Arbiter ID, used for making higher-level BP requests
    {attribute 'pytmc' := '
        pv: CohortCounter
        io: i
        field: DESC Intrnl cohort counter
     '}
    nArbiterCohort : UDINT := 1; // The cohort index keeps track of which beam parameter requests have been included in higher-level arbitrations
    // Init to 1, provides a guard against default cohort value in BP requests.
    {attribute 'pytmc' := '
        pv: ActiveInArbitration
        io: i
        field: DESC True if this arbiter's req is included
     '}
    xActiveInArbitration : BOOL; // True when this arbiter's request is included in all higher-level arbitrations
	
	rtActiveInArbitration : R_TRIG;
	
	nEntryCount : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddRequest" Id="{f6e392d1-3a4a-4d38-b38d-86d9847b5a7a}">
      <Declaration><![CDATA[// Adds a request to the arbiter pool.
// Returns true if the request was successfully added, false if not enough space or a request with the same ID is already present.
METHOD AddRequest : BOOL
VAR_INPUT
    nReqID    :    DWORD; // Unique ID within aribter for the request. Make sure this is unique for every device + state combination
    stReqBP        :    ST_BeamParams; //Requested beam params
END_VAR
VAR_INST
    fbLog : FB_LogMessage;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// If the request is already in the pool, then skip the rest.
// This is flawed, needs to update the request if it's already in the pool, despite having the same ID
IF THIS^.CheckRequestInPool(nReqID) THEN
    AddRequest := FALSE;
    RETURN;
END_IF

IF nReqID <> PMPS_GVL.EXCLUDED_ASSERTION_ID THEN
    stReqBP.nCohortInt := nArbiterCohort; // Set the cohort number for this BP request.
    
    THIS^.fbBPAssertionPool.A_Add(
        key := nReqID,
        putValue := stReqBP
    );
END_IF
    
IF NOT THIS^.fbBPAssertionPool.bOk THEN
    fbLog(sMsg:=CONCAT(DWORD_TO_STRING(nReqID),'Addition to arbiter assertion pool failed'),
            eSevr:=TcEventSeverity.Warning,
            eSubsystem:=E_Subsystem.MPS);
ELSIF THIS^.fbBPAssertionPool.bOk THEN
	fbLog(sMsg:=CONCAT(DWORD_TO_STRING(nReqID),'Added to pool'),
            eSevr:=TcEventSeverity.Verbose,
            eSubsystem:=E_Subsystem.MPS);
END_IF

// With any new request reset the internal arbiter "done" flag
xRequestMade R= THIS^.fbBPAssertionPool.bOk;

AddRequest := THIS^.fbBPAssertionPool.bOk;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ArbitrateBP" Id="{a1827a5c-2882-4b86-a919-45b183561daf}">
      <Declaration><![CDATA[// Kernel of the arbiter
// Logic for determining which beam parameter is the most conservative across all request sets.
METHOD INTERNAL ArbitrateBP : ST_BeamParams
VAR_INPUT
    stBP1    :    ST_BeamParams;
    stBP2    :    ST_BeamParams;
END_VAR
VAR
    idx : UINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//<TODO>Add something here to register the key that won for each param

//Attenuation
ArbitrateBP.nTran := MIN(stBP1.nTran, stBP2.nTran);

FOR idx := 1 TO PMPS_GVL.AUX_ATTENUATORS DO
    ArbitrateBP.astAttenuators[idx].nTran := MIN(stBP1.astAttenuators[idx].nTran, stBP2.astAttenuators[idx].nTran);
END_FOR

//Apertures
FOR idx := 1 TO PMPS_GVL.MAX_APERTURES DO
    ArbitrateBP.astApertures[idx].Height := MIN(stBP1.astApertures[idx].Height, stBP2.astApertures[idx].Height);
    ArbitrateBP.astApertures[idx].Width := MIN(stBP1.astApertures[idx].Width, stBP2.astApertures[idx].Width);
END_FOR

//Pulse energy
ArbitrateBP.fPP_mJ := MIN(stBP1.fPP_mJ, stBP2.fPP_mJ);

//Photon energy ranges
ArbitrateBP.neVRange := stBP1.neVRange AND stBP2.neVRange;

//Rate
ArbitrateBP.nRate := MIN(stBP1.nRate, stBP2.nRate);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRequest" Id="{a64ed6c5-2c93-405e-97a2-fa37d439d3b2}">
      <Declaration><![CDATA[(* Checks request ID is included in arbitration all the way to the accelerator interface
Use like so:
IF fbArbiter.CheckRequest(nStateIDAssertionToCheck) AND (other logic) THEN:
    Request is found and active in arbitration,. Do something.
ELSE:
    Request was not found, or is not yet included in arbitration. Don't do something/ wait.

*)
METHOD CheckRequest : BOOL
VAR_INPUT
    nReqID    :    DWORD;
END_VAR
VAR
    BP : ST_BeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbBPAssertionPool.A_Lookup(key := nReqID);

// Verify BP is acknowledged
BP := fbBPAssertionPool.getValue;

// This logic:
// Did we find the assertion in the pool?
// Is the assertion cohort number less than the current cohort and greater than zero?
// Is the Aribter itself active in arbitration?
CheckRequest := fbBPAssertionPool.bOk AND 
                BP.nCohortInt < nArbiterCohort AND
                BP.nCohortInt > 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRequestInPool" Id="{f0776990-a211-400b-9974-8651dfd1d437}">
      <Declaration><![CDATA[// Verify request is at least in the local arbiter
// Does not verify request has been included in arbitration.
// Use CheckRequest instead.
METHOD CheckRequestInPool : BOOL
VAR_INPUT
    nReqID    :    DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbBPAssertionPool.A_Lookup(key := nReqID);

CheckRequestInPool := THIS^.fbBPAssertionPool.bOk;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ElevateRequest" Id="{7ff662cb-d23f-49f5-854d-1d5b340251d9}">
      <Declaration><![CDATA[// <Arbiter Internal>
// Elevates the arbitrated BP set to something above.
// Could be another arbiter, or a BP requester/ IO, 
// or an FB that locks in a specific portion of the BP set.
METHOD ElevateRequest : BOOL 
VAR_INPUT
    HigherAuthority : I_HigherAuthority;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
This method should only be used with one higher level component.
*)

IF NOT xRequestMade THEN
	HigherAuthority.RemoveRequest(nReqID:= nArbiterID);
    xRequestMade := HigherAuthority.RequestBP(nReqID := nArbiterID, stReqBP := GetArbitratedBP());
    xActiveInArbitration := FALSE;
END_IF


xActiveInArbitration := HigherAuthority.CheckRequest(nReqID := nArbiterID);
rtActiveInArbitration(CLK:=xActiveInArbitration);

IF  rtActiveInArbitration.Q THEN // Check request must verify the ID is present and accounted for in arbitration
    nArbiterCohort := nArbiterCohort + 1; // This cohort number is for all subordinate requests within the arbiter
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c4038514-f5a2-484f-a41c-567aa0b6c31b}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    nID : DWORD := PMPS_GVL.EXCLUDED_ASSERTION_ID; // Arbiter ID, must be globally unique.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nArbiterID := nId;
fbBPAssertionPool.A_Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetArbitratedBP" Id="{aa6541e9-3c4b-40dc-96cf-1afc4ec47cdb}">
      <Declaration><![CDATA[// Executes Arbitration between all requested beam parameter sets
METHOD INTERNAL GetArbitratedBP : ST_BeamParams
VAR_INPUT
END_VAR
VAR
    getPosPtr    : POINTER TO T_HashTableEntry := 0;
    getBPStruct    :    ST_BeamParams;
    
    stOutputBP    :    ST_BeamParams; //Holding struct for arbitration process
END_VAR
VAR_INST
    xFirstPass : BOOL := TRUE;
    fbGetCurTaskIdx : GETCURTASKINDEX;
    LastCycleCount : UDINT;
    fbLogMessage : FB_LogMessage;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Arbitrate
(*
This step cycles through every hash table entry, comparing
the beam parameters from each assertion to what we're planning
to assert.

The safer of the two parameters is kept so at the end we may
have a mix of beam parameters, the composition being safe for
all asserters.

*)

THIS^.fbBPAssertionPool.A_GetFirst( putPosPtr := 0, getPosPtr=>getPosPtr, getValue=>getBPStruct );
IF THIS^.fbBPAssertionPool.bOk THEN //If the table is empty (not OK), we are left with the default stOutputBP set above.
    
    //The first entry in the hash table is taken as the setting to arbitrate against
    stOutputBP := F_SetBeamParams(
        nTran := getBPStruct.nTran,
        astAuxAtt := getBPStruct.astAttenuators,
        fPP_mJ := getBPStruct.fPP_mJ,
        neVRange    := getBPStruct.neVRange,
        nRate := getBPStruct.nRate
    );

    REPEAT
        THIS^.fbBPAssertionPool.A_GetNext( putPosPtr := THIS^.fbBPAssertionPool.getPosPtr, getPosPtr=>getPosPtr, getValue=>getBPStruct );
        IF THIS^.fbBPAssertionPool.bOk THEN
            stOutputBP := ArbitrateBP(stOutputBP, getBPStruct);
        END_IF
    UNTIL NOT fbBPAssertionPool.bOk
    END_REPEAT
ELSE
    //Full beam if there are no arbitration requests
    stOutputBP := PMPS_GVL.cstFullBeam;
END_IF
(*
stOutputBP.AckInt := stOutputBP.AckInt + 1; // Arbitration cycle

// Verify this function hasn't been run twice this cycle
IF xFirstPass THEN
    fbGetCurTaskIdx();
END_IF

IF LastCycleCount <> _TaskInfo[fbGetCurTaskIdx.index].CycleCount THEN
    // Good
    LastCycleCount := _TaskInfo[fbGetCurTaskIdx.index].CycleCount;
ELSE
    fbLogMessage(i_sMsg := 'GetArbitratedBP run more than once in a cycle.',
        i_eSevr := E_MesgSevr.Error,
        i_eSubsystem := E_Subsystem.MPS);
END_IF
*)


q_stBeamParams := stOutputBP;

GetArbitratedBP := stOutputBP;

GetArbitratedBP.xValidToggle := NOT GetArbitratedBP.xValidToggle;

fbBPAssertionPool.A_Count();
IF fbBPAssertionPool.bOk THEN
	nEntryCount := fbBPAssertionPool.nCount ;
END_IF

xFirstPass := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveRequest" Id="{79807308-416c-48f2-9db0-385196c0e213}">
      <Declaration><![CDATA[(* Removes request from abritration. *)
METHOD RemoveRequest : BOOL
VAR_INPUT
    nReqId    :    DWORD;
END_VAR
VAR_INST
    fbLog : FB_LogMessage;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nReqId <> PMPS_GVL.EXCLUDED_ASSERTION_ID THEN
    THIS^.fbBPAssertionPool.A_Remove(key := nReqId);
    
    IF THIS^.fbBPAssertionPool.bOk THEN
        	fbLog(sMsg:=CONCAT(DWORD_TO_STRING(nReqID),'Removed from pool'),
            eSevr:=TcEventSeverity.Verbose,
            eSubsystem:=E_Subsystem.MPS);
    ELSE
        fbLog(sMsg:=CONCAT(DWORD_TO_STRING(nReqID),'Failed to remove from pool'),
            eSevr:=TcEventSeverity.Warning,
            eSubsystem:=E_Subsystem.MPS);
    END_IF
END_IF

// With any new request reset the internal arbiter "done" flag
xRequestMade R= THIS^.fbBPAssertionPool.bOk;

RemoveRequest := THIS^.fbBPAssertionPool.bOk;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestBP" Id="{d19219fe-34dd-4096-83ea-674a98690de1}">
      <Declaration><![CDATA[METHOD RequestBP : BOOL
VAR_INPUT
	(*StateID of state requesting beam parameter set*)
	nReqID	: DWORD;
	(*Requested beam params*)
	stReqBP	: ST_BeamParams;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RequestBP := AddRequest(nReqID := nReqID, stReqBP := stReqBP);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>