<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_evRangeCalculator_Test" Id="{e6bcc6ca-553c-488f-ba3b-eabce151236e}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_evRangeCalculator_Test EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
VAR CONSTANT
    RandomBoundary : INT := 2;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[BasicFunction();]]></ST>
    </Implementation>
    <Method Name="BasicFunction" Id="{2787ce06-fe9f-4a43-87a2-e050fc9f0a9f}">
      <Declaration><![CDATA[METHOD BasicFunction
VAR_INPUT
END_VAR
VAR
    {attribute 'displaymode' := 'binary'}
    LastWord : WORD := 2#0000_0000_0000_0010;
    {attribute 'displaymode' := 'binary'}
    Result : WORD;
    {attribute 'displaymode' := 'binary'}
    TestEV : WORD;
    
    {attribute 'displaymode' := 'binary'}
    tEvW : WORD;
    tEv : REAL;
    
    
    fbStr : FB_FormatString;
    
    MiscNumber : INT;
END_VAR
VAR CONSTANT
    nLowerLimitBoundary : INT := 0;
    
    RandomBoundary : INT := 2;
    MNU : INT := 3; //RandomBoundary + 1
    MND : INT := 1; //RandomBoundary - 1
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Test('CheckRanges');

//Lower limit equal
tEvW.nLowerLimitBoundary := TRUE;
tEv := PMPS_GVL.g_areVBoundaries[nLowerLimitBoundary];
Result := F_eVRangeCalculator(tEv, 0);
AssertTrue(
    Result = tEvW,
    'Lower limit not inclusive');
    
// Lower range flags
tEvW.nLowerLimitBoundary := TRUE;
tEv := PMPS_GVL.g_areVBoundaries[nLowerLimitBoundary] / 2;
Result := F_eVRangeCalculator(tEv, 0);
AssertTrue(
    Result = tEvW,
    'eV below lower range should come back true');
    
//Mid range
tEvW := 0;
tEvW.RandomBoundary := TRUE;
//ev result that is smack dab in the middle of a range
tEv := PMPS_GVL.g_areVBoundaries[RandomBoundary] - ((PMPS_GVL.g_areVBoundaries[RandomBoundary] - PMPS_GVL.g_areVBoundaries[MND]) / 2);
Result := F_eVRangeCalculator(tEv, 0);
AssertTrue(
    Result = tEvW,
    'In range failed, whatever you did, it broke this really bad.');

//Out of range
tEvW := 0;
tEvW.RandomBoundary := TRUE;
//Ev result that is beyond the current range (midway into the next range up)
tEv := PMPS_GVL.g_areVBoundaries[MNU] - (PMPS_GVL.g_areVBoundaries[MNU]-PMPS_GVL.g_areVBoundaries[RandomBoundary])/2;
Result := F_eVRangeCalculator(tEv, 0);
AssertFalse(
    Result = tEvW,
    'Out of range failed, whatever you did, it broke this really bad.');

TEST_FINISHED();

Test('Negative eV failsafes');
//Negative eV
AssertTrue(
    F_eVRangeCalculator(-300, 0) = 16#FFFF,
    'Working with antimatter? Negative eV should failsafe to FFFF.');    

TEST_FINISHED();

Test('Check hyst keeps');

LastWord := F_eVRangeCalculator(PMPS_GVL.g_areVBoundaries[RandomBoundary], 2#0000_0000_0000_0000);

// Last word should be 2#0000_0000_0000_0100

    Result := F_eVRangeCalculator(
        PMPS_GVL.g_areVBoundaries[RandomBoundary] + PMPS_GVL.reVHyst - PMPS_GVL.reVHyst/2,
         LastWord);
    TestEV := 0;
    TestEV.RandomBoundary := TRUE;
    TestEV.MNU := True;
 
    fbStr.arg1 := F_WORD(Result);
    fbStr.arg2 := F_WORD(TestEV);
    fbStr.sFormat := 'Moving up does not stick. Result: %b vs. Test: %b';
    fbStr();
        
AssertTrue(Result = TestEV,
    fbStr.sOut);
    
    Result := F_eVRangeCalculator(
        PMPS_GVL.g_areVBoundaries[RandomBoundary - 1] - PMPS_GVL.reVHyst + PMPS_GVL.reVHyst/2, 
        LastWord);
    TestEV := 0;
    TestEV.RandomBoundary := TRUE;
    TestEV.MND := True;
    
    fbStr.arg1 := F_WORD(Result);
    fbStr.arg2 := F_WORD(TestEV);
    fbStr.sFormat := 'Moving down does not stick. Result: %b vs. Test: %b';
    fbStr();
    
AssertTrue(Result = TestEV,
    fbStr.sOut);

TEST_FINISHED();

Test('Check hyst drops');

    Result := F_eVRangeCalculator(
        PMPS_GVL.g_areVBoundaries[MND] - PMPS_GVL.reVHyst*1.1, 
        LastWord);
    TestEV := 0;
    TestEV.MND := TRUE;
    
    fbStr.arg1 := F_WORD(Result);
    fbStr.arg2 := F_WORD(TestEV);
    fbStr.sFormat := 'Moving down does not drop. Result: %b vs. Test: %b';
    fbStr();
    
AssertTrue(Result = TestEV,
    fbStr.sOut);

    Result := F_eVRangeCalculator(
        PMPS_GVL.g_areVBoundaries[RandomBoundary] + PMPS_GVL.reVHyst*1.1, 
        LastWord);
    TestEV := 0;
    TestEV.MNU := TRUE;
    
    fbStr.arg1 := F_WORD(Result);
    fbStr.arg2 := F_WORD(TestEV);
    fbStr.sFormat := 'Moving up does not drop. Result: %b vs. Test: %b';
    fbStr();
    
AssertTrue(Result = TestEV,
    fbStr.sOut);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_evRangeCalculator_Test">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_evRangeCalculator_Test.BasicFunction">
      <LineId Id="3" Count="8" />
      <LineId Id="82" Count="1" />
      <LineId Id="85" Count="1" />
      <LineId Id="88" Count="2" />
      <LineId Id="87" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="159" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="17" Count="16" />
      <LineId Id="94" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="121" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="100" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="41" Count="10" />
      <LineId Id="167" Count="0" />
      <LineId Id="170" Count="4" />
      <LineId Id="176" Count="6" />
      <LineId Id="168" Count="0" />
      <LineId Id="183" Count="12" />
      <LineId Id="169" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>