<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_ArbiterToSubSys_IO" Id="{1a7d9761-dced-4384-823d-a5e0b037bf80}" SpecialFunc="None">
    <Declaration><![CDATA[(* Exchanges preemption requests and current beam state with subsystems in arbiter
network.

2019-12-2, A. Wallace

*)
FUNCTION_BLOCK FB_ArbiterToSubSys_IO
VAR_INPUT
	RequestingSystemID	:	DWORD := PMPS_GVL.EXCLUDED_ASSERTION_ID; // System ID for making requests to the supreme arbiter
    Reset : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
	Arbiter	: FB_Arbiter;
    fbFFHWO : FB_HardwareFFOutput;
END_VAR
VAR
	i_RequestedBP AT %I*	:	ST_BeamParams;

	o_CurrentBP AT %Q* : ST_BeamParams;
    
    // EL6692 Diagnostics
    i_Connected AT %I* : BOOL; // SYNC Inputs^External device not connected !!! Doesn't really work.
    i_WcState AT %I* : BOOL; // WcState^WcState
    i_TxPDOState AT %I* : BOOL; // SYNC Inputs^TxPDO state
    i_TxPDOToggle AT %I* : BOOL; // TxPDO toggle
    
    // Fast faults
    ffPMPSIO_Disconnect : FB_FastFault := (i_Desc:='Fast fault on arbiter disconnection');
    nCohort : ULINT := 1; // Cohort counter
    rtToggle : R_TRIG;
    ctuNew : CTU := (PV := 10000);
    nRequestedCohort : ULINT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Update arbiter with our request
rtToggle(CLK:= i_RequestedBP.xValid); // If interface resumes, reset/catch up
// xValid will go false if the PLC program on the other side is stopped. Ironically the ethercat interface continues happily.
IF i_RequestedBP.nCohortInt > nRequestedCohort OR rtToggle.Q THEN
    Arbiter.RemoveRequest(RequestingSystemID);
    Arbiter.AddRequest(RequestingSystemID, i_RequestedBP);
    nRequestedCohort := i_RequestedBP.nCohortInt;
END_IF



// Check if latest request is acknowledged by this arbiter
// This happens after an arbitration
IF Arbiter.CheckRequest(RequestingSystemID) THEN
    nCohort := i_RequestedBP.nCohortInt;
END_IF

// Current beam params fanout
o_CurrentBP := PMPS_GVL.stCurrentBeamParameters;
o_CurrentBP.nCohortInt := nCohort;

// Both of these values should be 0 for a fully valid exchange
ffPMPSIO_Disconnect.i_xOK := NOT i_WcState AND NOT i_TxPDOState;

ffPMPSIO_Disconnect(
    io_fbFFHWO := fbFFHWO,
    i_xReset := Reset);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>