<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_HardwareFFOutput" Id="{4c5345fc-1911-455c-a3d8-14bade73dcd8}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK FB_HardwareFFOutput
VAR_INPUT
    {attribute 'pytmc' := '
        pv: ClearFault
        io: o
     '}
    i_xReset    :    BOOL;
    {attribute 'pytmc' := '
        pv: EnableVeto
        io: o
     '}
    i_xVeto    :    BOOL;    
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: FaultHWO
        io: i
     '}
    q_xFastFaultOut    AT %Q*    :    BOOL;
END_VAR
VAR
    
    {attribute 'instance-path'}
    {attribute 'noinit'}
    sPath    :    T_MaxString;

	{attribute 'pytmc' := '
        pv: OK
        io: i
     '}
    xOK    :    BOOL:= TRUE; // Current internal state of FFO, indicates if FFO will accept a reset
    
    rtReset    :    R_TRIG;
    rtResetandOK : R_TRIG;
    
    //Fault registration list
    //Fast faults add their name here to indicate they
    //"check in" to indicate their status with this fast
    //fault output. ie. They may be a culprit of beam off.
    nIndex    :    UINT := 1;
        {attribute 'pytmc' := '
        pv: FF
     '}
    astFF : ARRAY[1..PMPS_GVL.MAX_FAST_FAULTS] OF ST_FF;
	EvalIdx: UINT := 1;
	IdxOK: BOOL;
    
    logIdx : UINT := 1;
    fbJson : FB_JsonSaxWriter;
    pmpsTypeCode : UDINT := 0; // shows up in json as pmps_typecode
    fbLogger : FB_LogMessage := (
        eSevr := TcEventSeverity.Critical,
        eSubsystem := E_Subsystem.MPS);

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// <TODO> latch off beam if DI card status goes bad]]></ST>
    </Implementation>
    <Action Name="EvaluateOutput" Id="{1614665f-52f0-4071-a93e-c3d94919ee5b}">
      <Implementation>
        <ST><![CDATA[
IdxOK := True;
FOR EvalIdx := 1 TO PMPS_GVL.MAX_FAST_FAULTS DO
    IF NOT astFF[EvalIdx].Info.InUse THEN 
        CONTINUE;
    ELSE
        IdxOK := IdxOK AND astFF[EvalIdx].BeamPermitted;
    END_IF    
END_FOR

//<TODO> add diagnostic for success or failure of reset
rtReset(CLK:=i_xReset);
rtResetandOK(CLK:=rtReset.Q AND xOK); // Need two R_TRIG to avoid autoreset

q_xFastFaultOut S= rtResetandOK.Q OR i_xVeto;
q_xFastFaultOut R= NOT xOK AND NOT i_xVeto;

//Reset OK for next cycle
xOK := True;]]></ST>
      </Implementation>
    </Action>
    <Action Name="EvaluateVetos" Id="{7be01ed2-4dc3-48de-b07c-613e9f301029}">
      <Implementation>
        <ST><![CDATA[
FOR EvalIdx := 1 TO PMPS_GVL.MAX_FAST_FAULTS DO
    IF NOT astFF[EvalIdx].Info.InUse THEN 
        CONTINUE;
    ELSE
        // Veto timer
        IF astFF[EvalIdx].Veto.Deactivate THEN 
            astFF[EvalIdx].Veto.Timer.PT := T#0s; // Only needs to be set zero for one cycle
        ELSE
            astFF[EvalIdx].Veto.Timer.PT := UDINT_TO_TIME(astFF[EvalIdx].Veto.Duration);
        END_IF
        
        // UDINT conversions for ESS module compatibility.
        astFF[EvalIdx].Veto.Timer(
            IN := astFF[EvalIdx].Veto.Activate, // Rising edge activated
            Q => astFF[EvalIdx].Veto.Active);
            
        astFF[EvalIdx].Veto.tVetoActivate(CLK:=astFF[EvalIdx].Veto.Active);
        astFF[EvalIdx].Veto.VetoActLogAck S= astFF[EvalIdx].Veto.tVetoActivate.Q;
        
        astFF[EvalIdx].Veto.tVetoExpiring(CLK:=astFF[EvalIdx].Veto.Active);
        astFF[EvalIdx].Veto.VetoExpLogAck S= astFF[EvalIdx].Veto.tVetoExpiring.Q;
            
        astFF[EvalIdx].Veto.ElapsedTime := TIME_TO_UDINT(astFF[EvalIdx].Veto.Timer.ET);
        
        // Clear pushbuttons
        astFF[EvalIdx].Veto.Activate := FALSE;
        astFF[EvalIdx].Veto.Deactivate := FALSE;
        
    END_IF    
END_FOR


]]></ST>
      </Implementation>
    </Action>
    <Action Name="ExecuteLogging" Id="{5e96b8c8-5711-4e05-885f-92a874abdd48}">
      <Implementation>
        <ST><![CDATA[
FOR logIdx := 1 to PMPS_GVL.MAX_FAST_FAULTS do
    IF astFF[logIdx].FaultAck THEN
        
        pmpsTypeCode := 1;
        FormulateLogJson();
        
        //Json is gen. in FormulateLogJson
        fbLogger(sMsg := 'Fast Fault, beam off', eSevr:=TcEventSeverity.Critical);
        
        astFF[logIdx].FaultAck := FALSE;
	END_IF
    
    IF astFF[logIdx].Veto.VetoActLogAck THEN
        
        pmpsTypeCode := 2;
        FormulateLogJson();
        
        fbLogger(sMsg := 'Veto activated', eSevr:=TcEventSeverity.Warning);
        
        astFF[logIdx].Veto.VetoActLogAck := FALSE;
	END_IF
    
    IF astFF[logIdx].Veto.VetoExpLogAck THEN
        
        pmpsTypeCode := 3;
        FormulateLogJson();
        
        fbLogger(sMsg := 'Veto released', eSevr:=TcEventSeverity.Warning);
        
        astFF[logIdx].Veto.VetoExpLogAck := FALSE;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Action>
    <Action Name="FormulateLogJson" Id="{e45f0264-4193-40c5-bd71-0ca588b0ef2a}">
      <Implementation>
        <ST><![CDATA[fbJson.StartObject();
fbJson.AddKey('pmps_typecode');
fbJson.AddUdint(pmpsTypeCode);
fbJson.AddKey('pmps_path');
fbJson.AddString(astFF[logIdx].Info.sPath);
fbJson.AddKey('pmps_device_name');
fbJson.AddString(astFF[logIdx].Info.DevName);
fbJson.EndObject();
fbLogger.sJson := fbJson.GetDocument();
fbJson.ResetDocument();]]></ST>
      </Implementation>
    </Action>
    <Method Name="IdxCheckIn" Id="{9a63f75f-7c14-46d0-b762-024d9e3e2e01}">
      <Declaration><![CDATA[METHOD IdxCheckIn : BOOL
VAR_INPUT
    Idx : UINT;
    OK : BOOL;
    Reset : BOOL;
END_VAR
VAR
    stFF : ST_FF;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Idx := LIMIT(1,Idx,PMPS_GVL.MAX_FAST_FAULTS);
stFF := THIS^.astFF[Idx];

// Setting the log flag only on a state change.
stFF.FaultAck S= stFF.OK AND NOT OK;

// Updating internal fault state
stFF.OK := OK;

// Reset and latching logic
stFF.rtReset(CLK:=stFF.Reset OR Reset);
stFF.Reset R= stFF.rtReset.Q;
stFF.bsFF(SET := stFF.rtReset.Q OR stFF.Info.AutoReset, RESET1:= NOT OK);    

stFF.BeamPermitted := stFF.bsFF.Q1 OR stFF.Veto.Active;

// Fault generation    
IF NOT stFF.BeamPermitted THEN
    THIS^.xOK := FALSE; //Very clever, thanks Zach!
END_IF

// Fast fault accumulation
stFF.ftCountFault(CLK:=stFF.bsFF.Q1);
IF stFF.ftCountFault.Q THEN PMPS_GVL.AccumulatedFF := PMPS_GVL.AccumulatedFF + 1; END_IF

//Clear pushbuttons
stFF.Reset := FALSE;

// Copy state back to ff struct
THIS^.astFF[Idx] := stFF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Register" Id="{23e16e56-a8bb-4023-a4d1-ddbd32f89678}">
      <Declaration><![CDATA[METHOD Register : BOOL
VAR_INPUT
    stFFInfo : ST_FFInfo := (
        sPath := '',
        Desc := '',
        TypeCode := 16#00,
        DevName := ''); // Fast fault information
        
END_VAR
VAR_OUTPUT
    FFOName : T_MaxString;
    Idx : UINT;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FFOName := THIS^.sPath;
Idx := THIS^.nIndex;

IF THIS^.nIndex <= PMPS_GVL.MAX_FAST_FAULTS THEN
    
    THIS^.astFF[MIN(THIS^.nIndex,PMPS_GVL.MAX_FAST_FAULTS)].Info:=stFFInfo;
    
    THIS^.nIndex := THIS^.nIndex + 1;
    
    Register := TRUE; // Add successful    
ELSE
    Register := FALSE; // Failed to add name to list
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>