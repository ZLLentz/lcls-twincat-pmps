<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Arbiter_Test" Id="{33ac0bc1-5ef2-4a28-bd81-83e3f5956062}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_Arbiter_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Arbitration();
RequestCheckRemoveBP();
FullArbitrationStack();]]></ST>
    </Implementation>
    <Method Name="Arbitration" Id="{c3caf704-ac1c-41da-98d7-fd2af820601b}">
      <Declaration><![CDATA[METHOD Arbitration
VAR_INPUT
END_VAR
VAR
    
     nAttReqID    :    UDINT    := 1;
    stAttReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;
    
    nPPEReqID    :    UDINT    := 2;
    stPPEReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;
    
    nEVReqID    :    UDINT    := 3;
    stEVReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;
    
    nRateReqID    :    UDINT    := 4;
    stRateReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;
    
    stArbitratedBP    :    ST_BeamParams;
    stExpectedBP    :    ST_BeamParams;
END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Arbitration');

stAttReqBP.fAtt := 50;
stPPEReqBP.fPP_mJ := 1;
stEVReqBP.neVRange := 2#1111_1100_1111_1111;
stRateReqBP.nRate := 120;

//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nAttReqID, stAttReqBP),
                    'Safest attenuation request failed to load');
                    
//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nPPEReqID, stPPEReqBP),
                    'Safest PPE request failed to load');
                    
//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nEVReqID, stEVReqBP),
                    'Safest stEVReqBP request failed to load');
                    
//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nRateReqID, stRateReqBP),
                    'Safest stEVReqBP request failed to load');

stExpectedBP.fAtt     :=     stAttReqBP.fAtt;
stExpectedBP.fPP_mJ    :=  stPPEReqBP.fPP_mJ;
stExpectedBP.neVRange := stEVReqBP.neVRange;
stExpectedBP.nRate := stRateReqBP.nRate;

stArbitratedBP := fbArbiter.GetArbitratedBP();

AssertFalse(F_DiffReqBeamParams(stExpectedBP, stArbitratedBP),
                'Arbitrated BP does not match expected.');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FullArbitrationStack" Id="{17fe9309-58be-432c-a642-5a1fae576773}">
      <Declaration><![CDATA[METHOD FullArbitrationStack
VAR_INPUT
END_VAR
VAR   
    nId    :    DWORD := 1;
    stReq    :    ST_BeamParams := (fAtt:=12);
END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);
    
    fbHigherArb : FB_Arbiter(2);
    
    fbSubSysToArb : FB_SubSysToArbiter_IO;
    pBPR : POINTER TO ST_BeamParams;
    fbArbToSubSys : FB_ArbiterToSubSys_IO;
    pBPC : POINTER TO ST_BeamParams;
    
    fbBPR : FB_BPRequestor;
    
    FFO : FB_HardwareFFOutput;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbArbiter.AddRequest(nId, stReq);

TEST('CheckBPNotValidYet');
AssertFalse(fbArbiter.CheckRequest(nId),
    'Check should fail. Request not arbitrated yet.');
TEST_FINISHED();

fbSubSysToArb(Arbiter := fbArbiter, fbFFHWO := FFO);




pBPR := ADR(fbArbToSubSys.i_RequestedBP);
pBPR^ := fbSubSysToArb.q_stRequestedBP;

fbArbToSubSys(Arbiter := fbHigherArb, fbFFHWO := FFO);

fbBPR(Arbiter := fbHigherArb);

fbArbToSubSys(Arbiter := fbHigherArb, fbFFHWO := FFO);

pBPC := ADR(fbSubSysToArb.i_stCurrentBP);
pBPC^ := fbArbToSubSys.o_CurrentBP;

fbSubSysToArb(Arbiter := fbArbiter, fbFFHWO := FFO);

TEST('CheckBPValidNow');
AssertTrue(fbArbiter.CheckRequest(nId),
    'Check should pass.');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestCheckRemoveBP" Id="{62a4c245-663e-41d8-901a-0a0faba360f7}">
      <Declaration><![CDATA[METHOD RequestCheckRemoveBP
VAR_INPUT
END_VAR
VAR
    
    nId    :    DWORD := 1;
    stReq    :    ST_BeamParams;
END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('RequestBP');
AssertTrue(fbArbiter.AddRequest(nId, stReq),
    'Request failed');

TEST_FINISHED();
    
TEST('DuplicateID');
AssertFalse(fbArbiter.AddRequest(nId, stReq),
    'Duplicate request accepted, not good.');

TEST_FINISHED();
    
TEST('CheckBP');
AssertFalse(fbArbiter.CheckRequest(nId),
    'Check should fail. Request not arbitrated yet.');
TEST_FINISHED();

TEST('CheckBPArbitrated');
WRITE_PROTECTED_ULINT(ADR(fbArbiter.nArbiterCohort), fbArbiter.nArbiterCohort + 1);
AssertTrue(fbArbiter.CheckRequest(nId),
    'Check should pass.');

TEST_FINISHED();      
    
TEST('IDDoesNotExist');
WRITE_PROTECTED_ULINT(ADR(fbArbiter.nArbiterCohort), fbArbiter.nArbiterCohort + 1); 
AssertFalse(fbArbiter.CheckRequest(nId+1),
    'Check returned true when ID does not exist');

TEST_FINISHED();
    
TEST('RemoveBP');
AssertTrue(fbArbiter.RemoveRequest(nId),
    'Remove failed');
AssertFalse(fbArbiter.CheckRequest(nId),
    'Remove did not remove request');
    
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>