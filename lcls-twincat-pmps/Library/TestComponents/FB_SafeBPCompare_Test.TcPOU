<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_SafeBPCompare_Test" Id="{8a1c9dec-d419-4671-8e9f-3bf503fe2c8f}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_SafeBPCompare_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[BeamOffIsSafe();
BPComparisonCheck();]]></ST>
    </Implementation>
    <Method Name="BeamOffIsSafe" Id="{baafb4a0-1daf-4334-8116-72ea06a2d1cd}">
      <Declaration><![CDATA[//Verify beam off is considered safe.
METHOD BeamOffIsSafe
VAR_INPUT
END_VAR
VAR
    stBeamOn_MoreConservative    :    ST_BeamParams;
    stBeamOff_LessConservative    :    ST_BeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stBeamOn_MoreConservative  := F_SetBeamParams(
    50, //50% attenuation is more conservative than 0
    10,
    16#FFFF,
    120, //rate
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stBeamOff_LessConservative:= F_SetBeamParams(
    0, //0% attenuation, less conservative, without 0-rate this beam parameter set would be less safe than above
    10,
    16#FFFF,
    0, //rate, hence, more conservative
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); //0 beam rate means this bps is actually safer than BeamOn

TEST('BeamOffIsSafe');
    
AssertTrue(
    F_SafeBPCompare(stBeamOff_LessConservative, stBeamOn_MoreConservative),
    'SafeBPCompare does not think beam rate = 0 is safer than anything else.'); 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="BPComparisonCheck" Id="{204e7277-8e23-4c94-9e2b-614a24b72a02}">
      <Declaration><![CDATA[//Verify BP comparison remains logical.
METHOD BPComparisonCheck
VAR_INPUT
END_VAR
VAR
    stSafer    :    ST_BeamParams;
    stNotSoSafe    :    ST_BeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('BPComparisonCheck');


//Attenuation
stSafer := F_SetBeamParams(
    1, //
    10,
    16#FFFF,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stNotSoSafe := F_SetBeamParams(
    0, //
    10,
    16#FFFF,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); 
    
AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Attenuation eval is broken (True)'); 

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Attenuation eval is broken (False)');

//Attenuator array
AssertTrue(False, 'Implement attenuator array tests');
    
//Rate
stSafer := F_SetBeamParams(
    0,
    10,
    16#FFFF,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); //

stNotSoSafe := F_SetBeamParams(
    0,
    10,
    16#FFFF,
    10,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); //
    
AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Rate eval is broken (True)'); 

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Rate eval is broken (False)');
    
//Pulse energy
stSafer := F_SetBeamParams(
    0, 
    1, //
    16#FFFF,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stNotSoSafe := F_SetBeamParams(
    0, 
    10, //
    16#FFFF,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); 
    
AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Pulse energy eval is broken (True)'); 

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Pulse energy eval is broken (False)');    
    
//Photon energy
//More extensive tests elsewhere
stSafer := F_SetBeamParams(
    0, 
    1, 
    2#0000_0000_0000_0010,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stNotSoSafe := F_SetBeamParams(
    0, 
    1, 
    2#0000_0000_0000_0110,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);
    
AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Photon energy eval is broken (True)'); 

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Photon energy eval is broken (False)');    
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>