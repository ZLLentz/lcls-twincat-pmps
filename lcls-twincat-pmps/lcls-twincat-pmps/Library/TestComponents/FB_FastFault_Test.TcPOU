<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_FastFault_Test" Id="{2ec3826d-e723-4fb3-ae0d-bdcd8662dc40}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_FastFault_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[FFCombinedFunctionality();
FFRegistration();]]></ST>
    </Implementation>
    <Method Name="FFCombinedFunctionality" Id="{a87e81fa-eb2b-44b4-80d9-4461fa087530}">
      <Declaration><![CDATA[METHOD FFCombinedFunctionality
VAR_INPUT
END_VAR
VAR_INST
    fbFF    :    FB_FastFault;
    fbFFO    :    FB_HardwareFFOutput;
    
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('FFCombinedFunctionality');

//Clear initial faults
fbFFO.i_xReset:=TRUE; //Reset requested at start of cycle

fbFF(io_fbFFHWO := fbFFO, //FF reset somehwere in code
    i_xOK := TRUE,
    i_xReset := TRUE);

fbFFO.EvaluateOutput(); //FFO eval called at end of cycle
    
AssertTrue(fbFFO.q_xFastFaultOut,
    'Fast fault did not clear');


//Induce fault with FF

fbFFO(i_xReset := FALSE); //Reset released at start of cycle

fbFF(io_fbFFHWO := fbFFO, //FF faulted
    i_xOK := FALSE); //Reset is still set true from last call.
    
fbFFO.EvaluateOutput(); //FFO eval called at end of cycle

AssertFalse(fbFFO.q_xFastFaultOut,
    'Fast fault did not trip the beam');
    
    
//FFO remains faulted until local (FF) and FFO receieve fresh reset request, and faults
//are actually cleared

//Attempt to clear FFO fails because FF still faulted
fbFFO(i_xReset := TRUE); //Reset requested

fbFF(io_fbFFHWO := fbFFO, //FF faulted
    i_xOK := FALSE,
    i_xReset := FALSE);
    
fbFFO.EvaluateOutput(); //FFO eval called at end of cycle

AssertFalse(fbFFO.q_xFastFaultOut,
    'Fast fault output cleared while fault remains, very bad');
    
//Attempt to clear FF while fault remains fails
fbFFO(i_xReset := FALSE);
fbFFO(i_xReset := TRUE); //Reset requested

fbFF(io_fbFFHWO := fbFFO, //FF faulted
    i_xOK := FALSE,
    i_xReset := TRUE); //This reset should fail.
    
fbFFO.EvaluateOutput(); //FFO eval called at end of cycle

AssertFalse(fbFFO.q_xFastFaultOut,
    'Fast fault cleared while fault remains, very bad');
    
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FFRegistration" Id="{3ff41afd-9e3c-4c36-9c04-7ce787b90bc6}">
      <Declaration><![CDATA[METHOD FFRegistration
VAR_INPUT
END_VAR
VAR_INST
    fbFF    :    FB_FastFault;
    fbFFO    :    FB_HardwareFFOutput;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('FFRegistration');

fbFF(io_fbFFHWO := fbFFO);

AssertEquals_STRING(fbFF.sPath, fbFFO.astFF[fbFF.RegistrationIdx].Info.sPath,
    'FF registration with FFO did not succeed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>